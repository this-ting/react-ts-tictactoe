{"version":3,"sources":["Square/Square.tsx","PlayerContext.ts","Game/Game.tsx","GameOver/GameOver.tsx","Restart/Restart.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Square","input","handlePlayerClick","id","className","onClick","event","PlayerContext","React","createContext","Provider","Consumer","Game","player","context","renderSquare","props","game","this","Component","contextType","GameOver","handleRestart","winner","Restart","App","determineWinner","win","i","length","a","b","c","every","g","console","log","squares","state","slice","setState","renderGameOver","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ccbcb12.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Square.css\";\n\ninterface SquareProps {\n\tinput: string | null;\n\thandlePlayerClick: Function;\n\tid: number;\n}\n\nconst Square: React.FC<SquareProps> = ({ input, handlePlayerClick, id }) => {\n\treturn (\n\t\t<div\n\t\t\tclassName=\"Square\"\n\t\t\tonClick={event => {\n\t\t\t\thandlePlayerClick(event, id);\n\t\t\t}}\n\t\t>\n\t\t\t{input}\n\t\t</div>\n\t);\n};\n\nexport default Square;\n","import React from \"react\";\n\nconst PlayerContext = React.createContext({});\n\nexport const PlayerProvider = PlayerContext.Provider;\nexport const PlayerConsumer = PlayerContext.Consumer;\nexport default PlayerContext;\n","import React, { Component } from \"react\";\nimport \"./Game.css\";\nimport Square from \"../Square/Square\";\nimport PlayerContext from \"../PlayerContext\";\n\ninterface GameProps {\n\tgame: Array<string | null>;\n\thandlePlayerClick: Function;\n}\n\nclass Game extends Component<GameProps> {\n\tstatic contextType = PlayerContext;\n\tplayer = this.context;\n\n\trenderSquare = (id: number) => {\n\t\tconst { handlePlayerClick } = this.props;\n\t\treturn (\n\t\t\t<Square\n\t\t\t\tinput={this.props.game[id]}\n\t\t\t\thandlePlayerClick={handlePlayerClick}\n\t\t\t\tid={id}\n\t\t\t/>\n\t\t);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Game\">\n\t\t\t\t<div className=\"Game-HorizontalLine\">\n\t\t\t\t\t{this.renderSquare(0)}\n\t\t\t\t\t{this.renderSquare(1)}\n\t\t\t\t\t{this.renderSquare(2)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"Game-HorizontalLine\">\n\t\t\t\t\t{this.renderSquare(3)}\n\t\t\t\t\t{this.renderSquare(4)}\n\t\t\t\t\t{this.renderSquare(5)}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t{this.renderSquare(6)}\n\t\t\t\t\t{this.renderSquare(7)}\n\t\t\t\t\t{this.renderSquare(8)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Game;\n","import React from \"react\";\nimport \"./GameOver.css\";\n\ninterface GameOverProps {\n\thandleRestart: Function;\n\twinner: string;\n}\n\nconst GameOver: React.FC<GameOverProps> = ({ handleRestart, winner }) => {\n\treturn (\n\t\t<div className=\"GameOver\">\n\t\t\t<div className=\"GameOver-box\">\n\t\t\t\t{winner === \"tie\" ? `It was a tie!` : `Player ${winner} won!`}\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"GameOver-button\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\thandleRestart();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tPlay Again\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default GameOver;\n","import React from \"react\";\nimport \"./Restart.css\";\n\ninterface RestartProps {\n\thandleRestart: Function;\n}\n\nconst Restart: React.FC<RestartProps> = ({ handleRestart }) => {\n\treturn (\n\t\t<>\n\t\t\t<button\n\t\t\t\tclassName=\"Restart\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\thandleRestart();\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tRestart Game\n\t\t\t</button>\n\t\t</>\n\t);\n};\n\nexport default Restart;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Game from \"../Game/Game\";\nimport GameOver from \"../GameOver/GameOver\";\nimport Restart from \"../Restart/Restart\";\nimport { PlayerProvider } from \"../PlayerContext\";\n\ninterface AppProps {}\n\ninterface AppState {\n\tplayer: string;\n\tgame: Array<string | null>;\n}\n\nclass App extends Component<AppProps, AppState> {\n\tconstructor(props: AppProps) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tplayer: \"X\",\n\t\t\tgame: [null, null, null, null, null, null, null, null, null],\n\t\t};\n\t}\n\n\tdetermineWinner: Function = (game: Array<string | null>) => {\n\t\tconst win: Array<Array<number>> = [\n\t\t\t[0, 1, 2],\n\t\t\t[3, 4, 5],\n\t\t\t[6, 7, 8],\n\t\t\t[0, 3, 6],\n\t\t\t[1, 4, 7],\n\t\t\t[2, 5, 8],\n\t\t\t[0, 4, 8],\n\t\t\t[2, 4, 6],\n\t\t];\n\t\tfor (let i = 0; i < win.length; i++) {\n\t\t\tconst [a, b, c] = win[i];\n\t\t\tif (game[a] && game[a] === game[b] && game[a] === game[c]) {\n\t\t\t\treturn game[a];\n\t\t\t} else if (\n\t\t\t\tgame.every(g => {\n\t\t\t\t\treturn typeof g === \"string\";\n\t\t\t\t})\n\t\t\t) {\n\t\t\t\treturn \"tie\";\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\n\thandlePlayerClick = (event: Event, id: number) => {\n\t\tconsole.log(id);\n\t\tlet squares: Array<string | null> = this.state.game.slice();\n\t\tconst winner: string | null = this.determineWinner(this.state.game);\n\t\tif (squares[id] === null && !winner) {\n\t\t\tsquares[id] = this.state.player;\n\t\t\tthis.setState(state => ({\n\t\t\t\tplayer: state.player === \"X\" ? \"O\" : \"X\",\n\t\t\t\tgame: squares,\n\t\t\t}));\n\t\t}\n\t};\n\n\thandleRestart = () => {\n\t\tthis.setState(state => ({\n\t\t\tplayer: \"X\",\n\t\t\tgame: [null, null, null, null, null, null, null, null, null],\n\t\t}));\n\t};\n\n\trender() {\n\t\tconst winner = this.determineWinner(this.state.game);\n\t\tconst renderGameOver = !winner ? (\n\t\t\t<Game game={this.state.game} handlePlayerClick={this.handlePlayerClick} />\n\t\t) : (\n\t\t\t<>\n\t\t\t\t<GameOver handleRestart={this.handleRestart} winner={winner} />\n\t\t\t\t<Game\n\t\t\t\t\tgame={this.state.game}\n\t\t\t\t\thandlePlayerClick={this.handlePlayerClick}\n\t\t\t\t/>\n\t\t\t</>\n\t\t);\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<h1>Tic Tac Toe</h1>\n\t\t\t\t\t<h3>It is player {this.state.player}'s turn!</h3>\n\t\t\t\t</header>\n\t\t\t\t<body>\n\t\t\t\t\t{renderGameOver}\n\t\t\t\t\t<Restart handleRestart={this.handleRestart} />\n\t\t\t\t</body>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}